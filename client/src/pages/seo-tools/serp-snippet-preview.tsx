import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Copy, Eye, Smartphone, Monitor } from "lucide-react";

export function SerpSnippetPreview() {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [url, setUrl] = useState('');
  const [isMobile, setIsMobile] = useState(false);

  const getTruncatedTitle = () => {
    const maxLength = isMobile ? 78 : 60;
    return title.length > maxLength ? title.substring(0, maxLength) + "..." : title;
  };

  const getTruncatedDescription = () => {
    const maxLength = isMobile ? 120 : 160;
    return description.length > maxLength ? description.substring(0, maxLength) + "..." : description;
  };

  const getTruncatedUrl = () => {
    const maxLength = isMobile ? 30 : 50;
    if (url.length <= maxLength) return url;
    
    const protocol = url.match(/^https?:\/\//)?.[0] || '';
    const withoutProtocol = url.replace(/^https?:\/\//, '');
    const parts = withoutProtocol.split('/');
    
    if (parts[0].length > maxLength - 10) {
      return protocol + parts[0].substring(0, maxLength - 10) + "...";
    }
    
    return protocol + parts[0] + "/...";
  };

  const copySnippetData = () => {
    const snippetData = `SERP Snippet Preview

Title: ${title}
URL: ${url}
Description: ${description}

Preview:
Title (${getTruncatedTitle().length} chars): ${getTruncatedTitle()}
URL (displayed): ${getTruncatedUrl()}
Description (${getTruncatedDescription().length} chars): ${getTruncatedDescription()}

Device: ${isMobile ? 'Mobile' : 'Desktop'}

---
Generated by File Converter Box
`;
    navigator.clipboard.writeText(snippetData);
  };

  const exampleSnippets = [
    {
      title: "Best File Converter Tools 2024 | Free Online Utilities",
      url: "https://fileconverterbox.com",
      description: "Convert files instantly with our free online tools. Support for PDF, CSV, JSON, images and more. No registration required. Try now!"
    },
    {
      title: "SEO Content Optimizer - Analyze Your Content",
      url: "https://example.com/seo-tools",
      description: "Professional SEO tools to optimize your content for search engines. Analyze keywords, check meta tags, and improve rankings today."
    }
  ];

  const loadExample = (example: typeof exampleSnippets[0]) => {
    setTitle(example.title);
    setUrl(example.url);
    setDescription(example.description);
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Eye className="w-5 h-5" />
          SERP Snippet Preview Tool
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Device Toggle */}
        <div className="flex items-center gap-4">
          <span className="text-sm font-medium">Preview Device:</span>
          <div className="flex gap-2">
            <Button
              variant={!isMobile ? "default" : "outline"}
              size="sm"
              onClick={() => setIsMobile(false)}
              className="flex items-center gap-2"
            >
              <Monitor className="w-4 h-4" />
              Desktop
            </Button>
            <Button
              variant={isMobile ? "default" : "outline"}
              size="sm"
              onClick={() => setIsMobile(true)}
              className="flex items-center gap-2"
            >
              <Smartphone className="w-4 h-4" />
              Mobile
            </Button>
          </div>
        </div>

        {/* Input Section */}
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Page Title</label>
            <Input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter your page title..."
              className="w-full"
            />
            <div className="flex justify-between items-center mt-1 text-xs text-gray-500">
              <span>{title.length} characters</span>
              <span className={title.length > (isMobile ? 78 : 60) ? 'text-red-500' : 'text-green-500'}>
                {title.length > (isMobile ? 78 : 60) ? 'Will be truncated' : 'Good length'}
              </span>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Page URL</label>
            <Input
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="https://example.com/page"
              className="w-full"
              type="url"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Meta Description</label>
            <Textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Enter your meta description..."
              className="min-h-20 resize-none"
              rows={3}
            />
            <div className="flex justify-between items-center mt-1 text-xs text-gray-500">
              <span>{description.length} characters</span>
              <span className={description.length > (isMobile ? 120 : 160) ? 'text-red-500' : 'text-green-500'}>
                {description.length > (isMobile ? 120 : 160) ? 'Will be truncated' : 'Good length'}
              </span>
            </div>
          </div>
        </div>

        {/* Example Snippets */}
        <div className="space-y-2">
          <h3 className="text-sm font-semibold">Example Snippets:</h3>
          <div className="space-y-2">
            {exampleSnippets.map((example, index) => (
              <div key={index} className="flex items-start justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex-1">
                  <div className="font-medium text-sm">{example.title}</div>
                  <div className="text-xs text-green-600 mb-1">{example.url}</div>
                  <div className="text-xs text-gray-600">{example.description}</div>
                </div>
                <Button
                  onClick={() => loadExample(example)}
                  size="sm"
                  variant="outline"
                  className="ml-2 flex-shrink-0"
                >
                  Load
                </Button>
              </div>
            ))}
          </div>
        </div>

        {/* SERP Preview */}
        {(title || description || url) && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">
                Search Result Preview ({isMobile ? 'Mobile' : 'Desktop'})
              </h3>
              <Button onClick={copySnippetData} size="sm" variant="outline">
                <Copy className="w-4 h-4 mr-2" />
                Copy Data
              </Button>
            </div>

            <div className={`border border-gray-300 dark:border-gray-600 rounded-lg p-4 ${isMobile ? 'max-w-sm' : 'max-w-2xl'}`}>
              <div className="bg-white dark:bg-gray-900 p-4 rounded border">
                {/* Title */}
                <div className="text-blue-600 hover:underline cursor-pointer mb-1" style={{ fontSize: isMobile ? '16px' : '18px', lineHeight: '1.3' }}>
                  {title ? getTruncatedTitle() : 'Your page title will appear here'}
                </div>
                
                {/* URL */}
                <div className="text-green-700 dark:text-green-500 mb-2" style={{ fontSize: isMobile ? '12px' : '14px' }}>
                  {url ? getTruncatedUrl() : 'https://example.com/page'}
                </div>
                
                {/* Description */}
                <div className="text-gray-600 dark:text-gray-400" style={{ fontSize: isMobile ? '13px' : '14px', lineHeight: '1.4' }}>
                  {description ? getTruncatedDescription() : 'Your meta description will appear here. Make it compelling to encourage clicks from search results.'}
                </div>
              </div>
            </div>

            {/* Character Limits Info */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg text-sm">
              <div className="text-center">
                <div className="font-bold text-blue-600">
                  {getTruncatedTitle().length}/{isMobile ? 78 : 60}
                </div>
                <div className="text-gray-600 dark:text-gray-400">Title Characters</div>
                {title.length > (isMobile ? 78 : 60) && (
                  <Badge variant="destructive" className="mt-1 text-xs">Truncated</Badge>
                )}
              </div>
              <div className="text-center">
                <div className="font-bold text-green-600">
                  {getTruncatedDescription().length}/{isMobile ? 120 : 160}
                </div>
                <div className="text-gray-600 dark:text-gray-400">Description Characters</div>
                {description.length > (isMobile ? 120 : 160) && (
                  <Badge variant="destructive" className="mt-1 text-xs">Truncated</Badge>
                )}
              </div>
              <div className="text-center">
                <div className="font-bold text-purple-600">
                  {getTruncatedUrl().length}/{isMobile ? 30 : 50}
                </div>
                <div className="text-gray-600 dark:text-gray-400">URL Display Length</div>
                {url.length > (isMobile ? 30 : 50) && (
                  <Badge variant="destructive" className="mt-1 text-xs">Truncated</Badge>
                )}
              </div>
            </div>

            {/* Tips */}
            <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
              <h4 className="font-semibold text-sm mb-2">Optimization Tips:</h4>
              <ul className="text-sm space-y-1 text-gray-700 dark:text-gray-300">
                <li>• Keep titles under {isMobile ? '78' : '60'} characters to avoid truncation</li>
                <li>• Keep descriptions under {isMobile ? '120' : '160'} characters for full display</li>
                <li>• Include your target keyword in both title and description</li>
                <li>• Make your description compelling with a clear call-to-action</li>
                <li>• Test both mobile and desktop previews for optimal display</li>
              </ul>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}