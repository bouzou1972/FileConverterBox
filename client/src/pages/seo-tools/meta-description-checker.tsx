import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, XCircle, AlertCircle, Copy, FileText } from "lucide-react";

interface MetaDescriptionAnalysis {
  description: string;
  length: number;
  wordCount: number;
  isOptimalLength: boolean;
  hasKeyword: boolean;
  hasCallToAction: boolean;
  isTruncated: boolean;
  recommendations: string[];
}

export function MetaDescriptionChecker() {
  const [description, setDescription] = useState('');
  const [keyword, setKeyword] = useState('');
  const [analysis, setAnalysis] = useState<MetaDescriptionAnalysis | null>(null);

  const callToActionWords = ['get', 'download', 'try', 'start', 'learn', 'discover', 'find', 'buy', 'shop', 'order', 'contact', 'call', 'visit', 'join', 'sign up', 'register', 'subscribe', 'book', 'save', 'compare'];

  const analyzeDescription = () => {
    if (!description.trim()) return;

    const length = description.length;
    const wordCount = description.trim().split(/\s+/).length;
    const isOptimalLength = length >= 120 && length <= 160;
    const hasKeyword = keyword.trim() ? description.toLowerCase().includes(keyword.toLowerCase()) : false;
    const hasCallToAction = callToActionWords.some(word => 
      description.toLowerCase().includes(word.toLowerCase())
    );
    const isTruncated = length > 160;

    const recommendations: string[] = [];

    if (length < 120) {
      recommendations.push("Description is too short. Add more details to reach 120-160 characters.");
    }
    if (length > 160) {
      recommendations.push("Description is too long and will be truncated. Keep under 160 characters.");
    }
    if (keyword.trim() && !hasKeyword) {
      recommendations.push(`Include your focus keyword "${keyword}" naturally in the description.`);
    }
    if (!hasCallToAction) {
      recommendations.push("Add a call-to-action to encourage clicks (e.g., 'Learn more', 'Get started', 'Try now').");
    }
    if (!description.includes('.') && !description.includes('!') && !description.includes('?')) {
      recommendations.push("Use proper punctuation to make your description more readable.");
    }
    if (description === description.toUpperCase()) {
      recommendations.push("Avoid writing in ALL CAPS. Use sentence case for better readability.");
    }
    if (!/^[A-Z]/.test(description)) {
      recommendations.push("Start your description with a capital letter.");
    }

    if (recommendations.length === 0) {
      recommendations.push("Your meta description looks well-optimized!");
    }

    setAnalysis({
      description,
      length,
      wordCount,
      isOptimalLength,
      hasKeyword,
      hasCallToAction,
      isTruncated,
      recommendations
    });
  };

  const getPreview = () => {
    if (!analysis) return null;
    
    const maxLength = 160;
    const displayDescription = analysis.length > maxLength 
      ? analysis.description.substring(0, maxLength) + "..."
      : analysis.description;

    return displayDescription;
  };

  const copyToClipboard = () => {
    if (analysis) {
      const report = `Meta Description Analysis Report

Description: ${analysis.description}
Length: ${analysis.length} characters
Word Count: ${analysis.wordCount} words
Optimal Length: ${analysis.isOptimalLength ? 'Yes' : 'No'}
${keyword ? `Contains Keyword "${keyword}": ${analysis.hasKeyword ? 'Yes' : 'No'}` : ''}
Has Call-to-Action: ${analysis.hasCallToAction ? 'Yes' : 'No'}

Search Result Preview:
${getPreview()}

Recommendations:
${analysis.recommendations.map(rec => `â€¢ ${rec}`).join('\n')}

---
Generated by File Converter Box
`;
      navigator.clipboard.writeText(report);
    }
  };

  const exampleDescriptions = [
    "Convert files instantly with our free online tools. Support for PDF, CSV, JSON, images and more. No registration required. Try now!",
    "Professional SEO tools to optimize your content for search engines. Analyze keywords, check meta tags, and improve rankings today.",
    "Create stunning resumes with our AI-powered builder. Professional templates, expert tips, and instant download. Get hired faster!",
    "Discover the best file converter tools for 2024. Free, secure, and privacy-focused utilities for all your conversion needs."
  ];

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="w-5 h-5" />
          Meta Description Checker
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Input Section */}
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Meta Description</label>
            <Textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Enter your meta description here..."
              className="min-h-20 resize-none"
              rows={3}
            />
            <div className="flex justify-between items-center mt-1 text-xs text-gray-500">
              <span>{description.length}/160 characters</span>
              <span className={description.length > 160 ? 'text-red-500' : description.length < 120 ? 'text-yellow-500' : 'text-green-500'}>
                {description.length > 160 ? 'Too long' : description.length < 120 ? 'Too short' : 'Good length'}
              </span>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Focus Keyword (Optional)</label>
            <Input
              value={keyword}
              onChange={(e) => setKeyword(e.target.value)}
              placeholder="Enter your target keyword..."
              className="w-full"
            />
          </div>

          <Button onClick={analyzeDescription} disabled={!description.trim()}>
            Analyze Meta Description
          </Button>
        </div>

        {/* Example Descriptions */}
        <div className="space-y-2">
          <h3 className="text-sm font-semibold">Example Good Meta Descriptions:</h3>
          <div className="space-y-2">
            {exampleDescriptions.map((example, index) => (
              <div key={index} className="flex items-start justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="flex-1">
                  <span className="text-sm">{example}</span>
                  <div className="text-xs text-gray-500 mt-1">{example.length} characters</div>
                </div>
                <Button
                  onClick={() => setDescription(example)}
                  size="sm"
                  variant="outline"
                  className="ml-2 flex-shrink-0"
                >
                  Use This
                </Button>
              </div>
            ))}
          </div>
        </div>

        {/* Analysis Results */}
        {analysis && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">Analysis Results</h3>
              <Button onClick={copyToClipboard} size="sm" variant="outline">
                <Copy className="w-4 h-4 mr-2" />
                Copy Report
              </Button>
            </div>

            {/* SERP Preview */}
            <div className="border border-gray-300 dark:border-gray-600 rounded-lg p-4">
              <h4 className="text-sm font-semibold mb-2">Search Result Preview</h4>
              <div className="bg-white dark:bg-gray-900 p-3 rounded border">
                <div className="text-blue-600 hover:underline cursor-pointer text-lg">
                  Your Page Title Here
                </div>
                <div className="text-green-700 text-sm">https://example.com/page</div>
                <div className="text-gray-600 text-sm mt-1">
                  {getPreview()}
                </div>
              </div>
            </div>

            {/* Metrics */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{analysis.length}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Characters</div>
              </div>
              <div className="text-center p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{analysis.wordCount}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Words</div>
              </div>
              <div className="text-center p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                <div className="text-2xl">
                  {analysis.isOptimalLength ? (
                    <CheckCircle className="w-8 h-8 text-green-600 mx-auto" />
                  ) : (
                    <XCircle className="w-8 h-8 text-red-600 mx-auto" />
                  )}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Length</div>
              </div>
              <div className="text-center p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                <div className="text-2xl">
                  {analysis.hasCallToAction ? (
                    <CheckCircle className="w-8 h-8 text-green-600 mx-auto" />
                  ) : (
                    <XCircle className="w-8 h-8 text-red-600 mx-auto" />
                  )}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Call-to-Action</div>
              </div>
            </div>

            {/* Status Indicators */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                {analysis.isOptimalLength ? (
                  <CheckCircle className="w-5 h-5 text-green-600" />
                ) : (
                  <XCircle className="w-5 h-5 text-red-600" />
                )}
                <span className="text-sm">
                  Length: {analysis.length} characters 
                  {analysis.isOptimalLength ? ' (Optimal)' : ' (Needs adjustment)'}
                </span>
              </div>

              {keyword.trim() && (
                <div className="flex items-center gap-2">
                  {analysis.hasKeyword ? (
                    <CheckCircle className="w-5 h-5 text-green-600" />
                  ) : (
                    <XCircle className="w-5 h-5 text-red-600" />
                  )}
                  <span className="text-sm">
                    Keyword "{keyword}" {analysis.hasKeyword ? 'found' : 'not found'} in description
                  </span>
                </div>
              )}

              <div className="flex items-center gap-2">
                {analysis.hasCallToAction ? (
                  <CheckCircle className="w-5 h-5 text-green-600" />
                ) : (
                  <XCircle className="w-5 h-5 text-red-600" />
                )}
                <span className="text-sm">
                  Call-to-action {analysis.hasCallToAction ? 'present' : 'missing'}
                </span>
              </div>

              {analysis.isTruncated && (
                <div className="flex items-center gap-2">
                  <AlertCircle className="w-5 h-5 text-yellow-600" />
                  <span className="text-sm">Description may be truncated in search results</span>
                </div>
              )}
            </div>

            {/* Recommendations */}
            <div className="space-y-2">
              <h4 className="text-sm font-semibold">Recommendations</h4>
              <div className="space-y-2">
                {analysis.recommendations.map((rec, index) => (
                  <div key={index} className="flex items-start gap-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                    <div className="w-2 h-2 bg-blue-600 rounded-full mt-2 flex-shrink-0"></div>
                    <span className="text-sm">{rec}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}