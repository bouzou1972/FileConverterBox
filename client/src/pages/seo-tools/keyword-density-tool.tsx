import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Upload, Copy, Download, Search } from "lucide-react";

interface KeywordData {
  keyword: string;
  count: number;
  density: number;
}

export function KeywordDensityTool() {
  const [content, setContent] = useState('');
  const [keywords, setKeywords] = useState<KeywordData[]>([]);
  const [totalWords, setTotalWords] = useState(0);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type === 'text/plain') {
      const reader = new FileReader();
      reader.onload = (e) => {
        const text = e.target?.result as string;
        setContent(text);
      };
      reader.readAsText(file);
    }
  };

  const analyzeContent = () => {
    if (!content.trim()) return;

    const words = content.toLowerCase()
      .replace(/[^\w\s]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length > 2);

    const wordCount: Record<string, number> = {};
    words.forEach(word => {
      wordCount[word] = (wordCount[word] || 0) + 1;
    });

    const keywordData = Object.entries(wordCount)
      .map(([keyword, count]) => ({
        keyword,
        count,
        density: (count / words.length) * 100
      }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 20);

    setKeywords(keywordData);
    setTotalWords(words.length);
  };

  const exportToMarkdown = () => {
    const markdown = `# Keyword Density Analysis

**Total Words:** ${totalWords}
**Date:** ${new Date().toLocaleDateString()}

## Top Keywords

| Keyword | Count | Density |
|---------|-------|---------|
${keywords.map(k => `| ${k.keyword} | ${k.count} | ${k.density.toFixed(2)}% |`).join('\n')}

## SEO Recommendations

- Target keyword density between 1-3% for optimal SEO
- Focus on natural keyword placement over keyword stuffing
- Use semantic variations and related terms
- Ensure content provides value to readers first

---
*Generated by File Converter Box*
`;

    navigator.clipboard.writeText(markdown);
  };

  const downloadCSV = () => {
    const csvContent = [
      'Keyword,Count,Density (%)',
      ...keywords.map(k => `"${k.keyword}",${k.count},${k.density.toFixed(2)}`)
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'keyword-density-analysis.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getDensityColor = (density: number) => {
    if (density >= 5) return "text-red-600";
    if (density >= 2) return "text-yellow-600";
    if (density >= 1) return "text-green-600";
    return "text-gray-600";
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Search className="w-5 h-5" />
          Keyword Density & Consistency Tool
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">Content to Analyze</label>
          <Textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Paste your content here for keyword density analysis..."
            className="min-h-32"
          />
        </div>

        <div className="flex items-center gap-2">
          <Input
            type="file"
            accept=".txt"
            onChange={handleFileUpload}
            className="hidden"
            id="file-upload"
          />
          <label htmlFor="file-upload">
            <Button variant="outline" size="sm" asChild>
              <span className="cursor-pointer">
                <Upload className="w-4 h-4 mr-2" />
                Upload Text File
              </span>
            </Button>
          </label>
          <Button onClick={analyzeContent} disabled={!content.trim()}>
            Analyze Keywords
          </Button>
        </div>

        {keywords.length > 0 && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">Analysis Results</h3>
              <div className="flex gap-2">
                <Button onClick={exportToMarkdown} size="sm" variant="outline">
                  <Copy className="w-4 h-4 mr-2" />
                  Copy Markdown
                </Button>
                <Button onClick={downloadCSV} size="sm" variant="outline">
                  <Download className="w-4 h-4 mr-2" />
                  Download CSV
                </Button>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{totalWords}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Total Words</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{keywords.length}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Unique Keywords</div>
              </div>
            </div>

            <div className="space-y-2 max-h-64 overflow-y-auto">
              {keywords.map((keyword, index) => (
                <div key={index} className="flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                  <div className="flex items-center gap-3">
                    <Badge variant="outline">{index + 1}</Badge>
                    <span className="font-medium">{keyword.keyword}</span>
                  </div>
                  <div className="flex items-center gap-4">
                    <span className="text-sm text-gray-600 dark:text-gray-400">
                      {keyword.count} times
                    </span>
                    <span className={`font-semibold ${getDensityColor(keyword.density)}`}>
                      {keyword.density.toFixed(2)}%
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}