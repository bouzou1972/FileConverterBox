import { useState, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { BarChart3, Clock, FileText, Eye } from "lucide-react";
import CopyButton from "@/components/copy-button";
import BuyMeCoffee from "@/components/buy-me-coffee";

interface TextStats {
  characters: number;
  charactersNoSpaces: number;
  words: number;
  sentences: number;
  paragraphs: number;
  readingTime: number;
  avgWordsPerSentence: number;
  avgSentencesPerParagraph: number;
  longSentences: number;
  passiveVoice: number;
  readabilityScore: number;
}

export default function TextAnalyzer() {
  const [text, setText] = useState("");

  const stats = useMemo((): TextStats => {
    if (!text.trim()) {
      return {
        characters: 0,
        charactersNoSpaces: 0,
        words: 0,
        sentences: 0,
        paragraphs: 0,
        readingTime: 0,
        avgWordsPerSentence: 0,
        avgSentencesPerParagraph: 0,
        longSentences: 0,
        passiveVoice: 0,
        readabilityScore: 0
      };
    }

    const characters = text.length;
    const charactersNoSpaces = text.replace(/\s/g, '').length;
    
    // Words (split by whitespace and filter empty strings)
    const words = text.trim().split(/\s+/).filter(word => word.length > 0).length;
    
    // Sentences (split by sentence endings)
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0).length;
    
    // Paragraphs (split by double line breaks)
    const paragraphs = text.split(/\n\s*\n/).filter(p => p.trim().length > 0).length;
    
    // Reading time (average 200 words per minute)
    const readingTime = Math.ceil(words / 200);
    
    // Averages
    const avgWordsPerSentence = sentences > 0 ? Math.round(words / sentences) : 0;
    const avgSentencesPerParagraph = paragraphs > 0 ? Math.round(sentences / paragraphs * 10) / 10 : 0;
    
    // Long sentences (over 20 words)
    const sentenceArray = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    const longSentences = sentenceArray.filter(s => s.trim().split(/\s+/).length > 20).length;
    
    // Passive voice detection (simplified)
    const passiveIndicators = /\b(was|were|been|being|is|are|am)\s+\w+ed\b/gi;
    const passiveVoice = (text.match(passiveIndicators) || []).length;
    
    // Simple readability score (0-100, higher is easier)
    const avgSentenceLength = avgWordsPerSentence;
    const complexWords = text.split(/\s+/).filter(word => word.length > 6).length;
    const complexWordRatio = words > 0 ? complexWords / words : 0;
    const readabilityScore = Math.max(0, Math.min(100, 
      100 - (avgSentenceLength * 2) - (complexWordRatio * 50)
    ));

    return {
      characters,
      charactersNoSpaces,
      words,
      sentences,
      paragraphs,
      readingTime,
      avgWordsPerSentence,
      avgSentencesPerParagraph,
      longSentences,
      passiveVoice,
      readabilityScore: Math.round(readabilityScore)
    };
  }, [text]);

  const getReadabilityLevel = (score: number): { level: string; color: string } => {
    if (score >= 80) return { level: "Very Easy", color: "bg-green-500" };
    if (score >= 70) return { level: "Easy", color: "bg-green-400" };
    if (score >= 60) return { level: "Standard", color: "bg-yellow-500" };
    if (score >= 50) return { level: "Fairly Difficult", color: "bg-orange-500" };
    if (score >= 30) return { level: "Difficult", color: "bg-red-500" };
    return { level: "Very Difficult", color: "bg-red-600" };
  };

  const generateReport = () => {
    const readability = getReadabilityLevel(stats.readabilityScore);
    
    return `Text Analysis Report
========================

Basic Statistics:
- Characters: ${stats.characters.toLocaleString()}
- Characters (no spaces): ${stats.charactersNoSpaces.toLocaleString()}
- Words: ${stats.words.toLocaleString()}
- Sentences: ${stats.sentences.toLocaleString()}
- Paragraphs: ${stats.paragraphs.toLocaleString()}

Reading Analysis:
- Estimated reading time: ${stats.readingTime} minute${stats.readingTime !== 1 ? 's' : ''}
- Average words per sentence: ${stats.avgWordsPerSentence}
- Average sentences per paragraph: ${stats.avgSentencesPerParagraph}

Writing Quality:
- Long sentences (>20 words): ${stats.longSentences}
- Passive voice instances: ${stats.passiveVoice}
- Readability score: ${stats.readabilityScore}/100 (${readability.level})

Generated by FileConverterData Text Analyzer`;
  };

  return (
    <div className="max-w-6xl mx-auto px-4 py-10">
      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-3 text-foreground">
            <span className="material-icons text-purple-600 text-3xl">analytics</span>
            Text Analyzer
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-foreground mb-2">
              Text to Analyze
            </label>
            <Textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Paste or type your text here for analysis..."
              className="h-40 font-mono"
            />
          </div>

          {text.trim() && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {/* Basic Stats */}
              <Card className="bg-blue-50 dark:bg-blue-950/20">
                <CardContent className="p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <FileText className="w-4 h-4 text-blue-600" />
                    <span className="text-sm font-medium text-foreground">Characters</span>
                  </div>
                  <div className="text-2xl font-bold text-foreground">{stats.characters.toLocaleString()}</div>
                  <div className="text-xs text-muted-foreground">
                    {stats.charactersNoSpaces.toLocaleString()} without spaces
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-green-50 dark:bg-green-950/20">
                <CardContent className="p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <BarChart3 className="w-4 h-4 text-green-600" />
                    <span className="text-sm font-medium text-foreground">Words</span>
                  </div>
                  <div className="text-2xl font-bold text-foreground">{stats.words.toLocaleString()}</div>
                  <div className="text-xs text-muted-foreground">
                    {stats.sentences} sentences, {stats.paragraphs} paragraphs
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-orange-50 dark:bg-orange-950/20">
                <CardContent className="p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Clock className="w-4 h-4 text-orange-600" />
                    <span className="text-sm font-medium text-foreground">Reading Time</span>
                  </div>
                  <div className="text-2xl font-bold text-foreground">{stats.readingTime}</div>
                  <div className="text-xs text-muted-foreground">
                    minute{stats.readingTime !== 1 ? 's' : ''} (200 WPM)
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-purple-50 dark:bg-purple-950/20">
                <CardContent className="p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Eye className="w-4 h-4 text-purple-600" />
                    <span className="text-sm font-medium text-foreground">Readability</span>
                  </div>
                  <div className="text-2xl font-bold text-foreground">{stats.readabilityScore}/100</div>
                  <Badge className={`text-xs ${getReadabilityLevel(stats.readabilityScore).color} text-white`}>
                    {getReadabilityLevel(stats.readabilityScore).level}
                  </Badge>
                </CardContent>
              </Card>
            </div>
          )}

          {text.trim() && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Detailed Analysis */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Writing Analysis</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-foreground">Average Words per Sentence</span>
                      <span className="text-muted-foreground">{stats.avgWordsPerSentence}</span>
                    </div>
                    <Progress value={Math.min(100, stats.avgWordsPerSentence * 5)} className="h-2" />
                    <div className="text-xs text-muted-foreground mt-1">
                      {stats.avgWordsPerSentence < 15 ? "Concise" : stats.avgWordsPerSentence < 25 ? "Good" : "Consider shorter sentences"}
                    </div>
                  </div>

                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-foreground">Long Sentences (&gt;20 words)</span>
                      <span className="text-muted-foreground">{stats.longSentences}</span>
                    </div>
                    <Progress 
                      value={stats.sentences > 0 ? Math.min(100, (stats.longSentences / stats.sentences) * 100) : 0} 
                      className="h-2" 
                    />
                  </div>

                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-foreground">Passive Voice Instances</span>
                      <span className="text-muted-foreground">{stats.passiveVoice}</span>
                    </div>
                    <Progress 
                      value={stats.sentences > 0 ? Math.min(100, (stats.passiveVoice / stats.sentences) * 100) : 0} 
                      className="h-2" 
                    />
                  </div>

                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span className="text-foreground">Readability Score</span>
                      <span className="text-muted-foreground">{stats.readabilityScore}/100</span>
                    </div>
                    <Progress value={stats.readabilityScore} className="h-2" />
                  </div>
                </CardContent>
              </Card>

              {/* Structure Analysis */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Structure Analysis</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center p-3 bg-muted rounded">
                      <div className="text-2xl font-bold text-foreground">{stats.paragraphs}</div>
                      <div className="text-sm text-muted-foreground">Paragraphs</div>
                    </div>
                    <div className="text-center p-3 bg-muted rounded">
                      <div className="text-2xl font-bold text-foreground">{stats.avgSentencesPerParagraph}</div>
                      <div className="text-sm text-muted-foreground">Avg Sentences/Paragraph</div>
                    </div>
                  </div>
                  
                  <div className="p-4 bg-muted rounded">
                    <h4 className="font-medium text-foreground mb-2">Quick Tips</h4>
                    <ul className="text-sm text-muted-foreground space-y-1">
                      <li>• Aim for 15-20 words per sentence</li>
                      <li>• Use active voice when possible</li>
                      <li>• Keep paragraphs focused (3-5 sentences)</li>
                      <li>• Higher readability = easier to understand</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {text.trim() && (
            <div className="flex justify-center">
              <CopyButton 
                text={generateReport()} 
                label="Copy Full Report"
                variant="outline"
                className="px-6"
              />
            </div>
          )}
        </CardContent>
      </Card>
      
      <div className="text-center mt-8">
        <div className="mb-4">
          <p className="text-lg font-medium text-foreground mb-1">💛 Like these tools?</p>
          <p className="text-muted-foreground">Help support future development</p>
        </div>
        <BuyMeCoffee />
        <p className="text-sm text-gray-600 mt-2">
          Thanks for using this free tool! Your support keeps it ad-free and private.
        </p>
      </div>
    </div>
  );
}